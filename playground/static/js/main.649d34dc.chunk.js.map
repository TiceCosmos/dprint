{"version":3,"sources":["components/CodeEditor.tsx","components/Spinner.tsx","components/ExternalLink.tsx","FormatterWorker.ts","Playground.tsx","serviceWorker.tsx","plugins/getPluginDefaultConfig.ts","plugins/getPluginInfo.ts","utils/UrlSharer.ts","index.tsx"],"names":["Language","Spinner","props","backgroundColor","className","style","color","loading","size","CodeEditor","editor","monacoEditor","outerContainerRef","React","createRef","disposables","lastScrollTop","state","editorComponent","undefined","editorDidMount","bind","reactMonacoEditorPromise","then","language","TypeScript","languages","typescript","typescriptDefaults","setCompilerOptions","noLib","target","ScriptTarget","ESNext","allowNonTsExtensions","setDiagnosticsOptions","noSyntaxValidation","noSemanticValidation","defineTheme","base","inherit","rules","colors","setState","default","catch","err","console","error","this","updateScrollTop","updateJsonSchema","ref","getEditor","dispose","length","width","height","value","text","theme","onChange","options","automaticLayout","renderWhitespace","readOnly","readonly","minimap","enabled","quickSuggestions","rulers","lineWidth","push","onDidChangeModelContent","setPosition","column","lineNumber","onDidScrollChange","e","scrollTopChanged","onScrollTopChange","scrollTop","lastHeight","lastWidth","intervalId","setInterval","containerElement","current","offsetWidth","offsetHeight","layout","clearInterval","setTimeout","setScrollTop","jsonSchemaUrl","json","jsonDefaults","diagnosticsOptions","schemas","uri","validate","allowComments","enableSchemaRequest","fileMatch","Component","ExternalLink","id","href","url","rel","formatterWorker","Worker","formatListeners","errorListeners","Playground","configText","onConfigTextChanged","onTextChanged","formattedText","fileExtensions","selectedPlugin","plugins","onSelectPlugin","isLoading","useState","fileExtension","setFileExtension","useEffect","timeout","filePath","fileText","postMessage","type","clearTimeout","config","JSON","parse","useMemo","parseInt","isNaN","onFileExtensionChange","useCallback","event","split","defaultSize","allowResize","minSize","pane1Style","overflowX","overflowY","pane2Style","flex","display","selectedIndex","map","pluginInfo","i","key","ext","Json","configSchemaUrl","addEventListener","ev","data","listener","message","Boolean","window","location","hostname","match","plugin","a","fetch","response","wroteProperty","Object","keys","properties","propertyName","property","defaultValue","definitions","toString","schemaVersion","Error","typescriptPlugin","latest","find","p","configKey","jsonPlugin","markdownPlugin","Markdown","decompress","decompressFromEncodedURIComponent","trim","urlSaver","locationHash","document","hash","matches","exec","getText","getConfigText","getLanguage","history","replaceState","compressToEncodedURIComponent","initialUrl","getUrlInfo","isFirstLoad","Loader","setPlugins","setPlugin","setFileExtensions","setText","setConfigText","defaultConfigText","setDefaultConfigText","setFormattedText","setIsLoading","getPluginInfo","alert","updateUrl","defaultConfigPromise","getPluginDefaultConfig","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.649d34dc.chunk.js","sourcesContent":["import React from \"react\";\nimport type ReactMonacoEditorForTypes from \"react-monaco-editor\";\nimport type * as monacoEditorForTypes from \"monaco-editor\";\nimport { Spinner } from \"./Spinner\";\n\nexport interface CodeEditorProps {\n    onChange?: (text: string) => void;\n    text?: string;\n    readonly?: boolean;\n    lineWidth?: number;\n    scrollTop?: number;\n    jsonSchemaUrl?: string;\n    onScrollTopChange?: (scrollTop: number) => void;\n    language: Language;\n}\n\nexport enum Language {\n    TypeScript = \"typescript\",\n    Json = \"json\",\n    Markdown = \"markdown\",\n}\n\nexport interface CodeEditorState {\n    editorComponent: (typeof ReactMonacoEditorForTypes) | undefined | false;\n}\n\nexport class CodeEditor extends React.Component<CodeEditorProps, CodeEditorState> {\n    private editor: monacoEditorForTypes.editor.IStandaloneCodeEditor | undefined;\n    private monacoEditor: typeof monacoEditorForTypes | undefined;\n    private outerContainerRef = React.createRef<HTMLDivElement>();\n    private disposables: monacoEditorForTypes.IDisposable[] = [];\n\n    constructor(props: CodeEditorProps) {\n        super(props);\n        this.state = {\n            editorComponent: undefined,\n        };\n        this.editorDidMount = this.editorDidMount.bind(this);\n\n        const reactMonacoEditorPromise = import(\"react-monaco-editor\");\n        import(\"monaco-editor\").then(monacoEditor => {\n            this.monacoEditor = monacoEditor;\n            if (this.props.language === Language.TypeScript) {\n                monacoEditor.languages.typescript.typescriptDefaults.setCompilerOptions({\n                    noLib: true,\n                    target: monacoEditor.languages.typescript.ScriptTarget.ESNext,\n                    allowNonTsExtensions: true,\n                });\n                monacoEditor.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n                    noSyntaxValidation: true,\n                    noSemanticValidation: true,\n                });\n            }\n\n            monacoEditor.editor.defineTheme(\"dprint-theme\", {\n                base: \"vs-dark\",\n                inherit: true,\n                rules: [],\n                colors: {\n                    \"editorRuler.foreground\": \"#283430\",\n                },\n            });\n\n            reactMonacoEditorPromise.then(editor => {\n                this.setState({ editorComponent: editor.default });\n            }).catch(err => {\n                console.error(err);\n                this.setState({ editorComponent: false });\n            });\n        }).catch(err => {\n            console.error(err);\n            this.setState({ editorComponent: false });\n        });\n    }\n\n    render() {\n        this.updateScrollTop();\n        this.updateJsonSchema();\n\n        return (\n            <div className=\"codeEditor\" ref={this.outerContainerRef}>\n                {this.getEditor()}\n            </div>\n        );\n    }\n\n    componentWillUnmount() {\n        for (const disposable of this.disposables) {\n            disposable.dispose();\n        }\n        this.disposables.length = 0; // clear\n    }\n\n    private getEditor() {\n        if (this.state.editorComponent == null) {\n            return <Spinner backgroundColor=\"#1e1e1e\" />;\n        }\n        if (this.state.editorComponent === false) {\n            return <div className={\"errorMessage\"}>Error loading code editor. Please refresh the page to try again.</div>;\n        }\n\n        return (\n            <this.state.editorComponent\n                width=\"100%\"\n                height=\"100%\"\n                value={this.props.text}\n                theme=\"dprint-theme\"\n                language={this.props.language}\n                onChange={text => this.props.onChange && this.props.onChange(text)}\n                editorDidMount={this.editorDidMount}\n                options={{\n                    automaticLayout: false,\n                    renderWhitespace: \"all\",\n                    readOnly: this.props.readonly || false,\n                    minimap: { enabled: false },\n                    quickSuggestions: false,\n                    rulers: this.props.lineWidth == null ? [] : [this.props.lineWidth],\n                }}\n            />\n        );\n    }\n\n    private editorDidMount(editor: monacoEditorForTypes.editor.IStandaloneCodeEditor) {\n        this.editor = editor;\n\n        this.disposables.push(this.editor.onDidChangeModelContent(() => {\n            if (this.props.readonly) {\n                this.editor!.setPosition({\n                    column: 1,\n                    lineNumber: 1,\n                });\n            }\n        }));\n\n        this.disposables.push(this.editor.onDidScrollChange(e => {\n            if (e.scrollTopChanged && this.props.onScrollTopChange) {\n                this.props.onScrollTopChange(e.scrollTop);\n            }\n        }));\n\n        // manually refresh the layout of the editor (lightweight compared to monaco editor)\n        let lastHeight = 0;\n        let lastWidth = 0;\n        const intervalId = setInterval(() => {\n            const containerElement = this.outerContainerRef.current;\n            if (containerElement == null) {\n                return;\n            }\n\n            const width = containerElement.offsetWidth;\n            const height = containerElement.offsetHeight;\n            if (lastHeight === height && lastWidth === width) {\n                return;\n            }\n\n            editor.layout();\n\n            lastHeight = height;\n            lastWidth = width;\n        }, 500);\n        this.disposables.push({ dispose: () => clearInterval(intervalId) });\n    }\n\n    private lastScrollTop = 0;\n    private updateScrollTop() {\n        if (this.editor == null || this.lastScrollTop === this.props.scrollTop) {\n            return;\n        }\n\n        // todo: not sure how to not do this in the render method? I'm not a react/web person.\n        setTimeout(() => {\n            if (this.props.scrollTop != null) {\n                this.editor!.setScrollTop(this.props.scrollTop);\n                this.lastScrollTop = this.props.scrollTop;\n            }\n        }, 0);\n    }\n\n    private updateJsonSchema() {\n        if (this.monacoEditor != null && this.props.jsonSchemaUrl != null) {\n            if (this.monacoEditor.languages.json.jsonDefaults.diagnosticsOptions.schemas?.[0]?.uri !== this.props.jsonSchemaUrl) {\n                this.monacoEditor.languages.json.jsonDefaults.setDiagnosticsOptions({\n                    validate: true,\n                    allowComments: true,\n                    enableSchemaRequest: true,\n                    schemas: [{\n                        uri: this.props.jsonSchemaUrl,\n                        fileMatch: [\"*\"],\n                    }],\n                });\n            }\n        }\n    }\n}\n","import React from \"react\";\nimport { BeatLoader } from \"react-spinners\";\n\nexport function Spinner(props: { backgroundColor?: string; }) {\n    const { backgroundColor } = props;\n    return (\n        <div className={\"verticallyCenter horizontallyCenter fillHeight\"} style={{ backgroundColor }}>\n            <BeatLoader color={\"#fff\"} loading={true} size={25} />\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport function ExternalLink(props: { text: string; url: string; id?: string; }): React.ReactElement {\n    return <a id={props.id} href={props.url} rel=\"noopener noreferrer\">{props.text}</a>;\n}\n","const formatterWorker = new Worker(\"/playground/formatter.worker.js\");\nconst formatListeners: ((text: string) => void)[] = [];\nconst errorListeners: ((err: string) => void)[] = [];\n\nformatterWorker.addEventListener(\"message\", ev => {\n    switch (ev.data.type) {\n        case \"Format\":\n            for (const listener of formatListeners) {\n                listener(ev.data.text);\n            }\n            break;\n        case \"Error\":\n            for (const listener of errorListeners) {\n                listener(ev.data.message);\n            }\n            break;\n    }\n});\n\nexport function loadUrl(url: string) {\n    formatterWorker.postMessage({\n        type: \"LoadUrl\",\n        url,\n    });\n}\n\nexport function setConfig(config: any) {\n    formatterWorker.postMessage({\n        type: \"SetConfig\",\n        config,\n    });\n}\n\nexport function formatText(filePath: string, fileText: string) {\n    formatterWorker.postMessage({\n        type: \"Format\",\n        filePath,\n        fileText,\n    });\n}\n\nexport function addOnFormat(listener: (text: string) => void) {\n    formatListeners.push(listener);\n}\n\nexport function removeOnFormat(listener: (text: string) => void) {\n    const index = formatListeners.indexOf(listener);\n    if (index >= 0) {\n        formatListeners.splice(index, 1);\n    }\n}\n\nexport function addOnError(listener: (err: string) => void) {\n    errorListeners.push(listener);\n}\n\nexport function removeOnError(listener: (err: string) => void) {\n    const index = errorListeners.indexOf(listener);\n    if (index >= 0) {\n        errorListeners.splice(index, 1);\n    }\n}\n","import React, { useState, useCallback, useMemo, useEffect, ChangeEvent } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport { CodeEditor, ExternalLink, Language } from \"./components\";\nimport { Spinner } from \"./components\";\nimport \"./Playground.css\";\nimport \"./external/react-splitpane.css\";\nimport { PluginInfo } from \"./plugins\";\nimport * as formatterWorker from \"./FormatterWorker\";\n\nexport interface PlaygroundProps {\n    configText: string;\n    onConfigTextChanged: (text: string) => void;\n    text: string;\n    onTextChanged: (text: string) => void;\n    formattedText: string;\n    fileExtensions: string[];\n    selectedPlugin: PluginInfo;\n    plugins: PluginInfo[];\n    onSelectPlugin: (plugin: PluginInfo) => void;\n    isLoading: boolean;\n}\n\nexport function Playground({\n    configText,\n    onConfigTextChanged,\n    text,\n    onTextChanged,\n    formattedText,\n    fileExtensions,\n    selectedPlugin,\n    plugins,\n    onSelectPlugin,\n    isLoading,\n}: PlaygroundProps) {\n    const [scrollTop, setScrollTop] = useState(0);\n    const [fileExtension, setFileExtension] = useState<string | undefined>(undefined);\n\n    useEffect(() => {\n        setFileExtension(fileExtensions[0]);\n    }, [fileExtensions]);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            formatterWorker.formatText(\"file.\" + fileExtension ?? \"ts\", text);\n        }, 250);\n\n        return () => clearTimeout(timeout);\n    }, [fileExtension, text]);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            let config;\n            try {\n                config = JSON.parse(configText);\n                if (config.lineWidth == null) {\n                    config.lineWidth = 80;\n                }\n                formatterWorker.setConfig(config);\n            } catch (err) {\n                // ignore for now\n            }\n        }, 250);\n\n        return () => clearTimeout(timeout);\n    }, [configText]);\n\n    const lineWidth = useMemo(() => {\n        try {\n            const lineWidth = parseInt(JSON.parse(configText).lineWidth, 10);\n            if (!isNaN(lineWidth)) {\n                return lineWidth;\n            }\n        } catch (err) {\n            // ignore\n        }\n        return 80;\n    }, [configText]);\n    const onFileExtensionChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n        setFileExtension(event.target.value);\n    }, [setFileExtension]);\n\n    return (\n        <div className=\"App\">\n            <SplitPane split=\"horizontal\" defaultSize={50} allowResize={false}>\n                <header className=\"appHeader\">\n                    <h1 id=\"title\">dprint - Playground</h1>\n                    <div id=\"headerRight\">\n                        <a href=\"/overview\">Overview</a>\n                        <a href=\"/playground\">Playground</a>\n                        <a href=\"/sponsor\">Sponsor</a>\n                        <ExternalLink url=\"https://github.com/dprint/dprint\" text=\"View on GitHub\" />\n                    </div>\n                </header>\n                <SplitPane\n                    split=\"vertical\"\n                    minSize={50}\n                    defaultSize=\"50%\"\n                    allowResize={true}\n                    pane1Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                    pane2Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                >\n                    <SplitPane\n                        split=\"horizontal\"\n                        allowResize={true}\n                        defaultSize=\"60%\"\n                        pane1Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                        pane2Style={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\n                    >\n                        <div className=\"container\">\n                            <div className=\"playgroundSubTitle\">\n                                <div className=\"row\">\n                                    <div className=\"column\">\n                                        Plugin:\n                                    </div>\n                                    <div className=\"column\" style={{ flex: 1, display: \"flex\" }}>\n                                        <select onChange={e => onSelectPlugin(plugins[e.target.selectedIndex])} style={{ flex: 1 }} value={selectedPlugin.url}>\n                                            {plugins.map((pluginInfo, i) => {\n                                                return <option key={i} value={pluginInfo.url}>\n                                                    {pluginInfo.url}\n                                                </option>;\n                                            })}\n                                        </select>\n                                    </div>\n                                    <div className=\"column\" style={{ display: \"flex\" }}>\n                                        <select value={fileExtension} onChange={onFileExtensionChange}>\n                                            {fileExtensions.map((ext, i) => <option key={i} value={ext}>{\".\"}{ext}</option>)}\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            <CodeEditor\n                                language={selectedPlugin.language}\n                                onChange={onTextChanged}\n                                text={text}\n                                lineWidth={lineWidth}\n                                onScrollTopChange={setScrollTop}\n                                scrollTop={scrollTop}\n                            />\n                        </div>\n                        <div className=\"container\">\n                            <div className=\"playgroundSubTitle\">\n                                Configuration\n                            </div>\n                            <CodeEditor\n                                language={Language.Json}\n                                onChange={onConfigTextChanged}\n                                jsonSchemaUrl={selectedPlugin.configSchemaUrl}\n                                text={configText}\n                            />\n                        </div>\n                    </SplitPane>\n                    <div className=\"container\">\n                        {isLoading ? <Spinner /> : <CodeEditor\n                            language={selectedPlugin.language}\n                            text={formattedText}\n                            readonly={true}\n                            lineWidth={lineWidth}\n                            onScrollTopChange={setScrollTop}\n                            scrollTop={scrollTop}\n                        />}\n                    </div>\n                </SplitPane>\n            </SplitPane>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\"\n        // [::1] is the IPv6 localhost address.\n        || window.location.hostname === \"[::1]\"\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        || window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \"\n                            + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \"\n                                    + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404\n                || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\",\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { PluginInfo } from \"./getPluginInfo\";\n\nexport async function getPluginDefaultConfig(plugin: PluginInfo) {\n    const response = await fetch(plugin.configSchemaUrl);\n    const json = await response.json();\n    let text = \"{\";\n    let wroteProperty = false;\n\n    for (const propertyName of Object.keys(json.properties)) {\n        if (propertyName === \"$schema\" || propertyName === \"deno\" || propertyName === \"locked\") {\n            continue;\n        }\n        const property = json.properties[propertyName];\n        let defaultValue: string | boolean | number | undefined;\n\n        if (property[\"$ref\"]) {\n            defaultValue = json.definitions[propertyName]?.default;\n        } else {\n            defaultValue = property.default;\n        }\n\n        if (defaultValue != null) {\n            if (wroteProperty) {\n                text += \",\\n\";\n            } else {\n                text += \"\\n\";\n            }\n\n            text += `  \"${propertyName}\": `;\n            if (typeof defaultValue === \"string\") {\n                text += `\"${defaultValue}\"`;\n            } else {\n                if (propertyName === \"lineWidth\") {\n                    text += \"80\";\n                } else {\n                    text += `${defaultValue.toString()}`;\n                }\n            }\n\n            wroteProperty = true;\n        }\n    }\n\n    text += \"\\n}\\n\";\n\n    return text;\n}\n","import { Language } from \"../components\";\n\nexport async function getPluginInfo(): Promise<PluginInfo[]> {\n    const response = await fetch(\"https://plugins.dprint.dev/info.json\");\n    const json = await response.json();\n    const expectedSchemaVersion = 2;\n\n    if (json.schemaVersion !== expectedSchemaVersion) {\n        throw new Error(`Expected schema version ${expectedSchemaVersion}, but found ${json.schemaVersion}.`);\n    }\n\n    const typescriptPlugin = json.latest.find((p: any) => p.configKey === \"typescript\")!;\n    const jsonPlugin = json.latest.find((p: any) => p.configKey === \"json\")!;\n    const markdownPlugin = json.latest.find((p: any) => p.configKey === \"markdown\")!;\n\n    return [{\n        url: typescriptPlugin.url,\n        configSchemaUrl: \"https://plugins.dprint.dev/schemas/typescript-v0.json\",\n        language: Language.TypeScript,\n        fileExtensions: typescriptPlugin.fileExtensions,\n    }, {\n        url: jsonPlugin.url,\n        configSchemaUrl: \"https://plugins.dprint.dev/schemas/json-v0.json\",\n        language: Language.Json,\n        fileExtensions: jsonPlugin.fileExtensions,\n    }, {\n        url: markdownPlugin.url,\n        configSchemaUrl: \"https://plugins.dprint.dev/schemas/markdown-v0.json\",\n        language: Language.Markdown,\n        fileExtensions: markdownPlugin.fileExtensions,\n    }];\n}\n\nexport interface PluginInfo {\n    url: string;\n    configSchemaUrl: string;\n    language: Language;\n    fileExtensions: string[];\n}\n","import { decompressFromEncodedURIComponent, compressToEncodedURIComponent } from \"lz-string\";\n\nexport class UrlSaver {\n    getUrlInfo() {\n        const locationHash = document.location.hash || \"\";\n\n        return {\n            text: getText(),\n            configText: getConfigText(),\n            language: getLanguage(),\n        };\n\n        function getText() {\n            const matches = /code\\/([^/]+)/.exec(locationHash);\n            if (matches == null || matches.length !== 2) {\n                return \"\";\n            }\n\n            try {\n                return decompress(matches[1]);\n            } catch (err) {\n                console.error(err);\n                return \"\";\n            }\n        }\n\n        function getConfigText(): string | undefined {\n            const matches = /config\\/([^/]+)/.exec(locationHash);\n            if (matches == null || matches.length !== 2) {\n                return undefined;\n            }\n\n            try {\n                return decompress(matches[1]);\n            } catch (err) {\n                console.error(err);\n                return undefined;\n            }\n        }\n\n        function getLanguage(): \"typescript\" | \"json\" | \"markdown\" {\n            const matches = /language\\/([^/]+)/.exec(locationHash);\n            if (matches == null || matches.length !== 2) {\n                return \"typescript\";\n            }\n\n            try {\n                switch (matches[1]) {\n                    case \"json\":\n                        return \"json\";\n                    case \"markdown\":\n                        return \"markdown\";\n                    case \"typescript\":\n                    default:\n                        return \"typescript\";\n                }\n            } catch (err) {\n                console.error(err);\n                return \"typescript\";\n            }\n        }\n    }\n\n    updateUrl({ text, configText, language }: { text: string; configText?: string; language?: \"typescript\" | \"json\" | \"markdown\"; }) {\n        if (language == null) {\n            window.history.replaceState(\n                undefined,\n                \"\",\n                ``,\n            );\n        } else {\n            let url = `#code/${compressToEncodedURIComponent(text)}`;\n            if (configText != null) {\n                url += `/config/${compressToEncodedURIComponent(configText)}`;\n            }\n            url += `/language/${language}`;\n            window.history.replaceState(\n                undefined,\n                \"\",\n                url,\n            );\n        }\n    }\n}\n\nfunction decompress(text: string) {\n    return decompressFromEncodedURIComponent(text.trim()) || \"\"; // will be null on error\n}\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Playground } from \"./Playground\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Spinner } from \"./components\";\nimport { getPluginInfo, PluginInfo, getPluginDefaultConfig } from \"./plugins\";\nimport { UrlSaver } from \"./utils\";\nimport * as formatterWorker from \"./FormatterWorker\";\n\nconst urlSaver = new UrlSaver();\nconst initialUrl = urlSaver.getUrlInfo();\nlet isFirstLoad = true;\n\nfunction Loader() {\n    const [plugins, setPlugins] = useState<PluginInfo[]>([]);\n    const [plugin, setPlugin] = useState<PluginInfo | undefined>();\n    const [fileExtensions, setFileExtensions] = useState<string[]>([]);\n    const [text, setText] = useState(initialUrl.text);\n    const [configText, setConfigText] = useState(initialUrl.configText ?? \"\");\n    const [defaultConfigText, setDefaultConfigText] = useState(\"\");\n    const [formattedText, setFormattedText] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        getPluginInfo().then(plugins => {\n            setPlugins(plugins);\n            setPlugin(plugins.find(p => p.language === initialUrl.language ?? \"typescript\")!);\n        }).catch(err => {\n            console.error(err);\n            alert(\"There was an error getting the plugins. Try refreshing the page or check the browser console.\");\n        });\n    }, []);\n    useEffect(() => {\n        formatterWorker.addOnFormat(text => {\n            setFormattedText(text);\n        });\n\n        formatterWorker.addOnError(err => {\n            console.error(err);\n            alert(\"There was an error with the formatter worker. Try refreshing the page or check the browser console.\");\n        });\n    }, []);\n\n    useEffect(() => {\n        if (plugin == null) {\n            return;\n        }\n\n        urlSaver.updateUrl({\n            text,\n            configText: configText === defaultConfigText ? undefined : configText,\n            language: plugin.language,\n        });\n    }, [text, configText, plugin, defaultConfigText]);\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        if (plugin == null) {\n            return;\n        }\n\n        const defaultConfigPromise = getPluginDefaultConfig(plugin);\n\n        formatterWorker.loadUrl(plugin.url);\n\n        defaultConfigPromise.then(defaultConfigText => {\n            setFileExtensions([...plugin.fileExtensions]); // todo: get this from the wasm file (easy to do)\n\n            if (isFirstLoad && initialUrl.configText != null) {\n                setConfigText(initialUrl.configText);\n                isFirstLoad = false;\n            } else {\n                setConfigText(defaultConfigText);\n            }\n            setDefaultConfigText(defaultConfigText);\n            setIsLoading(false);\n        })\n            .catch(err => {\n                console.error(err);\n                alert(\"There was an error loading the plugin. Check the console or try refreshing the page.\");\n            });\n    }, [plugin]);\n\n    if (plugin == null) {\n        return <Spinner />;\n    }\n\n    return <Playground\n        text={text}\n        onTextChanged={setText}\n        configText={configText}\n        onConfigTextChanged={setConfigText}\n        formattedText={formattedText}\n        fileExtensions={fileExtensions}\n        plugins={plugins}\n        selectedPlugin={plugin}\n        onSelectPlugin={setPlugin}\n        isLoading={isLoading}\n    />;\n}\n\nReactDOM.render(<Loader />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}